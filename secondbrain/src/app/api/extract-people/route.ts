import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { getAuthenticatedUser } from '@/lib/api-auth';
import { getPeopleByUserId, Person, PersonDetailCategory, saveExtractedPersonInfo, incrementPersonMentionCount, updateEntryMoodData } from '@/lib/firebase-operations';

// Inicializar el cliente de OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Interfaz para la solicitud de extracci√≥n de personas
interface ExtractPeopleRequest {
  text: string;
  userId: string;
  entryDate?: string; // Fecha de la entrada del diario para a√±adir a los detalles
  entryId?: string; // ID de la entrada para actualizar el estado de √°nimo
}

interface PersonExtracted {
  name: string;
  information: Record<string, unknown>;
}

export async function POST(request: Request) {
  try {
    const authHeader = request.headers.get('authorization');
    const token = authHeader?.replace('Bearer ', '');
    const user = await getAuthenticatedUser(token);

    // validar usuario
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Extraemos y validamos los datos de la solicitud
    const body = await request.json();
    const { text, userId, entryDate, entryId } = body as ExtractPeopleRequest;

    if (user.uid !== userId) {
      return NextResponse.json({ error: 'User mismatch' }, { status: 403 });
    }

    if (!text || text.trim() === '') {
      return NextResponse.json(
        { error: 'No se proporcion√≥ texto para analizar' },
        { status: 400 }
      );
    }

    if (!userId) {
      return NextResponse.json(
        { error: 'Se requiere el ID del usuario' },
        { status: 400 }
      );
    }

    if (!entryDate) {
      return NextResponse.json(
        { error: 'Se requiere la fecha de la entrada' },
        { status: 400 }
      );
    }

    // Usar la fecha proporcionada (siempre debe venir del frontend)
    const validEntryDate = entryDate;
    
    console.log('üîç [API Extract People] Fecha recibida desde frontend:', entryDate);
    console.log('üîç [API Extract People] Fecha validada para usar:', validEntryDate);

    // Convertir userId a UUID v√°lido para la consulta (usar directamente el userId de Firebase)
    const validUUID = userId; // Usar directamente el userId de Firebase Auth
    
    // Obtener personas existentes de la base de datos para proporcionar contexto
    const existingPeople = await getPeopleByUserId(validUUID);
    
    // Construir contexto detallado de personas conocidas para el d√≠a actual
    let peopleContext = '';
    if (existingPeople && existingPeople.length > 0) {
      console.log('üîç [API Extract People] Construyendo contexto de personas para fecha:', validEntryDate);
      
      peopleContext = 'Personas que ya conozco:\n';
      existingPeople.forEach((person: Person) => {
        const details = person.details || {};
        let personInfo = `- ${person.name}:`;
        
        // Obtener rol, relaci√≥n, cumplea√±os y direcci√≥n m√°s recientes
        let currentRole = 'desconocido';
        let currentRelation = 'desconocido';
        let currentBirthday = '';
        let currentAddress = '';
        
        if (details.rol && typeof details.rol === 'object' && 'entries' in details.rol) {
          const entries = (details.rol as PersonDetailCategory).entries;
          if (entries && entries.length > 0) {
            currentRole = entries[entries.length - 1].value;
          }
        } else if (typeof details.rol === 'string') {
          currentRole = details.rol;
        }
        
        if (details.relacion && typeof details.relacion === 'object' && 'entries' in details.relacion) {
          const entries = (details.relacion as PersonDetailCategory).entries;
          if (entries && entries.length > 0) {
            currentRelation = entries[entries.length - 1].value;
          }
        } else if (typeof details.relacion === 'string') {
          currentRelation = details.relacion;
        }

        if (details.cumplea√±os && typeof details.cumplea√±os === 'object' && 'entries' in details.cumplea√±os) {
          const entries = (details.cumplea√±os as PersonDetailCategory).entries;
          if (entries && entries.length > 0) {
            currentBirthday = entries[entries.length - 1].value;
          }
        } else if (typeof details.cumplea√±os === 'string') {
          currentBirthday = details.cumplea√±os;
        }

        if (details.direccion && typeof details.direccion === 'object' && 'entries' in details.direccion) {
          const entries = (details.direccion as PersonDetailCategory).entries;
          if (entries && entries.length > 0) {
            currentAddress = entries[entries.length - 1].value;
          }
        } else if (typeof details.direccion === 'string') {
          currentAddress = details.direccion;
        }
        
        personInfo += ` rol="${currentRole}", relaci√≥n="${currentRelation}"`;
        if (currentBirthday) personInfo += `, cumplea√±os="${currentBirthday}"`;
        if (currentAddress) personInfo += `, direcci√≥n="${currentAddress}"`;
        
        // Obtener detalles SOLO del d√≠a actual
        const todayDetails: string[] = [];
        for (const [key, value] of Object.entries(details)) {
          if (key !== 'rol' && key !== 'relacion' && key !== 'cumplea√±os' && key !== 'direccion' && value) {
            if (typeof value === 'object' && 'entries' in value) {
              const entries = (value as PersonDetailCategory).entries;
              if (entries && entries.length > 0) {
                // Filtrar solo las entradas del d√≠a actual
                const todayEntries = entries.filter(entry => entry.date === validEntryDate);
                todayEntries.forEach(entry => {
                  todayDetails.push(`${key}: ${entry.value}`);
                });
              }
            } else if (typeof value === 'string') {
              // Para formato antiguo, no tenemos fecha, lo incluimos con precauci√≥n
              todayDetails.push(`${key}: ${value}`);
            }
          }
        }
        
        if (todayDetails.length > 0) {
          personInfo += `, INFORMACI√ìN YA REGISTRADA HOY (${validEntryDate})=[${todayDetails.join(', ')}]`;
        } else {
          personInfo += `, SIN INFORMACI√ìN REGISTRADA HOY (${validEntryDate})`;
        }
        
        peopleContext += personInfo + '\n';
      });
    } else {
      peopleContext = 'No tengo informaci√≥n previa sobre ninguna persona.';
    }
    
    // Log temporal para debug - remover en producci√≥n
    console.log('üîç [API Extract People] Contexto completo de personas:', peopleContext);
    console.log('üîç [API Extract People] Fecha de entrada recibida:', validEntryDate);
    console.log('üîç [API Extract People] Texto a analizar:', text);
    console.log('üîç [API Extract People] Enviando prompt a OpenAI...');
    
    // Formatear la fecha de la entrada para el contexto - asegurar que use la fecha exacta
    const [year, month, day] = validEntryDate.split('-').map(Number);
    const entryDateObj = new Date(year, month - 1, day); // month - 1 porque Date usa meses 0-indexados
    const entryDateFormatted = entryDateObj.toLocaleDateString('es-ES', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    console.log('üîç [API Extract People] Fecha formateada para IA:', entryDateFormatted);
    
    const extractPrompt = `
      Analiza el siguiente texto y extrae informaci√≥n sobre las personas mencionadas en √©l.
      
      FECHA DE LA ENTRADA DEL DIARIO: ${entryDateFormatted} (${validEntryDate})
      IMPORTANTE: Cuando el texto mencione "hoy", "ayer", "ma√±ana", etc., usa esta fecha como referencia.
      
      ${peopleContext}
      
      Instrucciones para la extracci√≥n de personas:

      1. INCLUYE personas mencionadas de cualquier forma:
         - Nombres expl√≠citos: "Mar√≠a", "Juan", "Dr. Garc√≠a"
         - Referencias familiares: "mi madre", "mi novia", "mi hermano"
         - Referencias relacionales: "mi amigo", "mi jefe", "mi compa√±ero"
      2. SOLO incluye informaci√≥n que se menciona EXPL√çCITAMENTE en el texto actual
      3. NO incluyas informaci√≥n que no est√© mencionada en el texto

      4. EVITAR DUPLICADOS CR√çTICO - ESPECIALMENTE DEL MISMO D√çA:
         - La "INFORMACI√ìN YA REGISTRADA HOY" es informaci√≥n YA GUARDADA para la fecha ${entryDateFormatted}
         - Si el texto menciona algo que YA EST√Å en "INFORMACI√ìN YA REGISTRADA HOY", NO lo incluyas
         - Si una persona muestra "SIN INFORMACI√ìN REGISTRADA HOY", puedes agregar cualquier detalle nuevo
         - Busca informaci√≥n COMPLETAMENTE NUEVA que no est√© ya registrada para esta fecha
         - Ejemplos de duplicados a evitar:
           * Ya registrado hoy: "tiene examen de matem√°ticas" ‚Üí Texto: "examen de mates" = NO incluir
           * Ya registrado hoy: "fue al gimnasio" ‚Üí Texto: "estuvo en el gym" = NO incluir
           * Ya registrado hoy: "comi√≥ pizza" ‚Üí Texto: "cen√≥ pizza" = S√ç incluir (son eventos diferentes)
         - REGLA DE ORO: Si hay duda sobre si es duplicado del mismo d√≠a, NO lo incluyas

      5. DEFINICI√ìN DE CAMPOS:
         - 'rol': SOLO si el texto menciona una ocupaci√≥n o profesi√≥n (estudiante, m√©dico, ingeniero, etc.)
         - 'relacion': SOLO si el texto menciona una relaci√≥n contigo (amigo, madre, pareja, hermano, etc.)
         - 'cumpleanos': SOLO si el texto menciona una fecha de cumplea√±os (ej: "cumple el 15 de marzo", "naci√≥ en diciembre", etc.)
         - 'direccion': SOLO si el texto menciona una direcci√≥n o ubicaci√≥n donde vive (ej: "vive en Madrid", "su casa est√° en...", etc.)
         - 'detalles': Eventos, actividades o hechos mencionados sobre la persona

      6. REFERENCIAS TEMPORALES:
         - Cuando el texto dice "hoy", "ayer", "ma√±ana", usa la fecha de la entrada como referencia
         - Si se menciona "hoy es el cumplea√±os de X", interpreta como cumplea√±os en la fecha de la entrada
         - Para fechas espec√≠ficas (ej: "15 de marzo"), √∫salas tal como aparecen
         - Para referencias relativas, calcula bas√°ndote en la fecha de la entrada

      7. Si una persona conocida se menciona pero no se dice nueva informaci√≥n sobre ella, NO la incluyas en la respuesta

      8. MANEJO DE REFERENCIAS RELACIONALES:
         - Si el texto dice "mi novia" y ya conoces el nombre de esa persona (ej: relaci√≥n='novia'), usa el nombre conocido
         - Si el texto dice "mi novia" y NO conoces qui√©n es la novia, cr√©ala como nueva persona con name="mi novia" y relacion="novia"
         - Si el texto dice "mi madre" y NO conoces qui√©n es la madre, cr√©ala como nueva persona con name="mi madre" y relacion="madre"
         - Mismo principio para: "mi hermano", "mi amigo", "mi jefe", etc.

      EJEMPLOS DE COMPORTAMIENTO CORRECTO:
      
      Contexto: "Vero: rol='estudiante', relaci√≥n='novia', cumplea√±os='15 de marzo', INFORMACI√ìN YA REGISTRADA HOY (2025-06-15)=[tiene examen de matem√°ticas]"
      Texto: "Vero tiene examen ma√±ana"
      Respuesta: {"people": []} (porque "examen" ya est√° registrado hoy)
      
      Contexto: "Vero: rol='estudiante', relaci√≥n='novia', INFORMACI√ìN YA REGISTRADA HOY (2025-06-20)=[tiene examen de matem√°ticas]"
      Fecha de entrada: "jueves, 20 de junio de 2025"
      Texto: "Hoy es el cumplea√±os de Vero y fue al gimnasio"
      Respuesta: {"people": [{"name": "Vero", "information": {"cumplea√±os": "20 de junio", "detalles": ["fue al gimnasio"]}}]}
      
      Contexto: "Ana: rol='m√©dica', INFORMACI√ìN YA REGISTRADA HOY (2025-06-15)=[trabaj√≥ en el hospital, cen√≥ pasta]"
      Texto: "Ana estuvo trabajando en el hospital y comi√≥ pasta para cenar"
      Respuesta: {"people": []} (porque "trabaj√≥ en el hospital" y "cen√≥ pasta" ya est√°n registrados hoy)
      
      Contexto: "Pedro: INFORMACI√ìN YA REGISTRADA HOY (2025-06-15)=[fue al gimnasio]"
      Texto: "Pedro fue al gym por la ma√±ana y luego estudi√≥ para el examen"
      Respuesta: {"people": [{"name": "Pedro", "information": {"detalles": ["estudi√≥ para el examen"]}}]} (gimnasio ya registrado, pero estudio es nuevo)
      
      Contexto: "Luis: SIN INFORMACI√ìN REGISTRADA HOY (2025-06-15)"
      Texto: "Luis fue a comprar y luego volvi√≥ a casa"
      Respuesta: {"people": [{"name": "Luis", "information": {"detalles": ["fue a comprar", "volvi√≥ a casa"]}}]}
      
      Contexto: "No tengo informaci√≥n previa"
      Texto: "Mi novia me ha preparado una tarta"
      Respuesta: {"people": [{"name": "mi novia", "information": {"relacion": "novia", "detalles": ["me ha preparado una tarta"]}}]}
      
      Contexto: "Vero: rol='estudiante', relaci√≥n='novia'"
      Texto: "Mi novia me ha preparado una tarta"
      Respuesta: {"people": [{"name": "Vero", "information": {"detalles": ["me ha preparado una tarta"]}}]} (usa el nombre conocido)
      
      Contexto: "No tengo informaci√≥n previa"
      Texto: "Conoc√≠ a Juan, es m√©dico y vive en Barcelona"
      Respuesta: {"people": [{"name": "Juan", "information": {"rol": "m√©dico", "direccion": "Barcelona"}}]}
      
      Contexto: "Mar√≠a: rol='profesora', relaci√≥n='amiga'"
      Fecha de entrada: "s√°bado, 15 de diciembre de 2025"
      Texto: "Hoy cumple a√±os Mar√≠a y se mud√≥ a Valencia"
      Respuesta: {"people": [{"name": "Mar√≠a", "information": {"direccion": "Valencia", "cumplea√±os": "15 de diciembre"}}]}
      
      ATENCI√ìN: USA SIEMPRE "cumplea√±os" con √± en tus respuestas, NUNCA "cumpleanos" sin √±.
      
      Texto a analizar:
      ${text}
      
      Responde con un objeto JSON con esta estructura exacta:
      {
        "people": [
          {
            "name": "Nombre completo",
            "information": {
              "rol": "OPCIONAL - Solo si se menciona ocupaci√≥n",
              "relacion": "OPCIONAL - Solo si se menciona relaci√≥n",
              "cumplea√±os": "OPCIONAL - Solo si se menciona fecha de cumplea√±os - USA SIEMPRE LA √ë",
              "direccion": "OPCIONAL - Solo si se menciona direcci√≥n o ubicaci√≥n",
              "detalles": [
                "Solo informaci√≥n nueva mencionada en el texto que NO est√© ya registrada hoy"
              ]
            }
          }
        ]
      }
      
      Si no hay personas mencionadas con informaci√≥n nueva, devuelve: {"people": []}
      Responde SOLO con el JSON, sin explicaciones.
    `;

    // Log temporal para verificar que el prompt incluye la √±
    if (extractPrompt.includes('cumplea√±os')) {
      console.log('‚úÖ [API Extract People] El prompt contiene "cumplea√±os" con √± correctamente');
    } else {
      console.log('‚ùå [API Extract People] ERROR: El prompt NO contiene "cumplea√±os" con √±');
    }

    const extractCompletion = await openai.chat.completions.create({
      model: "o4-mini-2025-04-16",
      messages: [
        { role: "system", content: "Eres un asistente especializado en extraer informaci√≥n estructurada sobre personas." },
        { role: "user", content: extractPrompt }
      ],
      response_format: { type: "json_object" }
    });

    let peopleExtracted: PersonExtracted[] = [];

    try {
      const content = extractCompletion.choices[0].message.content || '{}';
      
      // Log temporal para debug - remover en producci√≥n
      console.log('üîç [API Extract People] Respuesta de la IA:');
      console.log(content);
      
      const extractResponse = JSON.parse(content);
      
      // Verificar espec√≠ficamente si hay "cumplea√±os" con √± en la respuesta de la IA
      const contentLower = content.toLowerCase();
      if (contentLower.includes('cumplea√±os') || contentLower.includes('cumpleanos')) {
        console.log('üéÇ [API Extract People] Verificando cumplea√±os en respuesta IA:');
        console.log('- Contiene "cumplea√±os" (con √±):', contentLower.includes('cumplea√±os'));
        console.log('- Contiene "cumpleanos" (sin √±):', contentLower.includes('cumpleanos'));
        console.log('- Respuesta completa:', content);
      }
      
      // Comprobar si la respuesta es un array o un objeto con propiedad 'people'
      if (Array.isArray(extractResponse)) {
        peopleExtracted = extractResponse;
      } else {
        peopleExtracted = extractResponse.people || [];
      }
      
      // Verificar que "cumplea√±os" mantenga la √± despu√©s del JSON.parse
      if (peopleExtracted.length > 0) {
        peopleExtracted.forEach((person, index) => {
          const info = person.information || {};
          if (info.cumplea√±os || info.cumpleanos) {
            console.log(`üéÇ [API Extract People] Persona ${index + 1} - ${person.name}:`);
            console.log('- Tiene "cumplea√±os" (con √±):', !!info.cumplea√±os);
            console.log('- Tiene "cumpleanos" (sin √±):', !!info.cumpleanos);
            console.log('- Informaci√≥n completa:', JSON.stringify(info));
          }
        });
      }
      
      // Guardar informaci√≥n de personas en la base de datos
      if (peopleExtracted.length > 0 && userId) {
        // Convertir userId a string (usar directamente el userId de Firebase)
        const userIdString = userId.toString();
        
        // Usar directamente el userIdString sin convertir a UUID
        const validUUID = userIdString;
        
        try {
          await Promise.all(peopleExtracted.map(async (personData) => {
            if (!personData.name) return; // Ignorar entradas sin nombre
            
            // Usar la nueva funci√≥n que maneja fechas autom√°ticamente
            await saveExtractedPersonInfo(
              personData.name,
              personData.information || {},
              validUUID,
              validEntryDate // Usar la fecha validada
            );
            
            // Incrementar el contador de menciones para esta persona
            await incrementPersonMentionCount(validUUID, personData.name);
          }));
        } catch (saveError) {
          console.error('Error al guardar personas:', saveError);
          return NextResponse.json(
            { error: 'Error al guardar la informaci√≥n de personas' },
            { status: 500 }
          );
        }
      }
    } catch (parseError) {
      console.error('Error al analizar respuesta JSON:', parseError);
      return NextResponse.json(
        { error: 'Error al procesar la respuesta de la IA' },
        { status: 500 }
      );
    }

    // An√°lisis de estado de √°nimo si se proporciona entryId
    let moodAnalysis = null;
    if (entryId && text.trim().length > 0) {
      try {
        const moodAnalysisPrompt = `
          Analiza el siguiente texto de entrada de diario y eval√∫a cada estado emocional del 0 al 100.
          Cada categor√≠a debe ser evaluada independientemente seg√∫n su intensidad real en el texto.
          
          GU√çAS DE EVALUACI√ìN:
          
          ESTR√âS (0-100): Ansiedad, presi√≥n, preocupaciones, tensi√≥n, agobio, conflictos, discusiones, problemas
          - 0-20: Muy poco o ning√∫n estr√©s
          - 21-40: Estr√©s leve, peque√±as preocupaciones
          - 41-60: Estr√©s moderado, situaciones complicadas
          - 61-80: Estr√©s alto, conflictos importantes, discusiones serias
          - 81-100: Estr√©s extremo, crisis, situaciones muy tensas
          
          TRANQUILIDAD (0-100): Calma, serenidad, paz, relajaci√≥n, equilibrio
          - 0-20: Muy agitado, sin paz mental
          - 21-40: Poca tranquilidad, inquietud
          - 41-60: Tranquilidad moderada
          - 61-80: Bastante tranquilo, en calma
          - 81-100: Muy tranquilo, en completa paz
          
          FELICIDAD (0-100): Alegr√≠a, satisfacci√≥n, logros, momentos positivos, entusiasmo
          - 0-20: Muy poca o ninguna felicidad
          - 21-40: Felicidad leve, algunos momentos agradables
          - 41-60: Felicidad moderada
          - 61-80: Bastante feliz, buenos momentos
          - 81-100: Muy feliz, euforia, gran alegr√≠a
          
          TRISTEZA (0-100): Melancol√≠a, pena, nostalgia, des√°nimo, dolor emocional, decepci√≥n
          - 0-20: Muy poca o ninguna tristeza
          - 21-40: Tristeza leve, ligero des√°nimo
          - 41-60: Tristeza moderada, momentos melanc√≥licos
          - 61-80: Tristeza considerable, dolor emocional
          - 81-100: Tristeza profunda, gran dolor emocional
          
          EJEMPLOS DE SITUACIONES:
          - Discusi√≥n/pelea con pareja/amigo: Estr√©s 70-85, Tranquilidad 10-25, Felicidad 10-30, Tristeza 60-80
          - D√≠a productivo en el trabajo: Estr√©s 20-40, Tranquilidad 60-80, Felicidad 70-85, Tristeza 5-20
          - Muerte de familiar: Estr√©s 60-80, Tranquilidad 10-30, Felicidad 5-20, Tristeza 80-95
          - Reuni√≥n con amigos: Estr√©s 5-25, Tranquilidad 60-80, Felicidad 70-90, Tristeza 5-20
          
          Eval√∫a cada emoci√≥n considerando el contexto, las palabras utilizadas y la intensidad emocional del texto.
          
          Texto a analizar:
          ${text.slice(0, 2000)}
          
          Responde SOLO con un objeto JSON en este formato exacto:
          {"stress": 25, "tranquility": 70, "happiness": 80, "sadness": 10}
          
          Cada valor debe estar entre 0 y 100 y reflejar la intensidad real de cada emoci√≥n.
        `;

        const moodCompletion = await openai.chat.completions.create({
          model: "o4-mini-2025-04-16",
          messages: [
            { 
              role: "system", 
              content: "Eres un psic√≥logo experto en an√°lisis de estados emocionales en textos. Tu objetivo es detectar con precisi√≥n y sensibilidad las emociones humanas, especialmente en situaciones de conflicto, estr√©s, tristeza o alegr√≠a. S√© perceptivo a las sutilezas emocionales y eval√∫a cada emoci√≥n de forma independiente seg√∫n su intensidad real en el contexto." 
            },
            { role: "user", content: moodAnalysisPrompt }
          ],
          response_format: { type: "json_object" }
        });

        const moodResult = JSON.parse(moodCompletion.choices[0].message.content || '{"stress": 30, "tranquility": 40, "happiness": 40, "sadness": 20}');
        
        // Validar que los valores est√©n entre 0 y 100
        const validateMoodValue = (value: number) => Math.max(0, Math.min(100, Math.round(value)));
        
        const validatedMood = {
          stress: validateMoodValue(moodResult.stress || 0),
          tranquility: validateMoodValue(moodResult.tranquility || 0),
          happiness: validateMoodValue(moodResult.happiness || 0),
          sadness: validateMoodValue(moodResult.sadness || 0)
        };

        // Guardar el an√°lisis de estado de √°nimo en la entrada
        const moodUpdated = await updateEntryMoodData(entryId, validatedMood);

        if (moodUpdated) {
          moodAnalysis = validatedMood;
          console.log('‚úÖ [API Extract People] Estado de √°nimo analizado y guardado:', validatedMood);
        }
      } catch (moodError) {
        console.error('‚ùå [API Extract People] Error al analizar estado de √°nimo:', moodError);
      }
    }

    return NextResponse.json({ 
      peopleExtracted,
      moodAnalysis,
      message: peopleExtracted.length > 0 
        ? `Se han extra√≠do y guardado ${peopleExtracted.length} persona(s) con informaci√≥n nueva` 
        : 'No se encontr√≥ informaci√≥n nueva para extraer. Las personas ya mencionadas se mantienen sin cambios.',
      totalPeopleProcessed: peopleExtracted.length,
      date: validEntryDate
    });
  } catch (error) {
    console.error('Error en API de extracci√≥n de personas:', error);
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    return NextResponse.json(
      { error: `Error al procesar la solicitud: ${errorMessage}` },
      { status: 500 }
    );
  }
}
